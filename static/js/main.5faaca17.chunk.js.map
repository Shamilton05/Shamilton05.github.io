{"version":3,"sources":["store.js","blocks.js","diamonds/BackfaceMaterial.js","diamonds/RefractionMaterial.js","diamonds/Diamonds.js","CustomMaterial.js","index.js"],"names":["state","sections","pages","zoom","images","diamonds","x","offset","pos","Vector3","factor","top","createRef","offsetContext","createContext","Block","children","props","useBlock","parentOffset","sectionHeight","ref","useRef","undefined","useFrame","curY","current","position","y","curTop","lerp","Provider","value","useThree","size","viewport","useContext","viewportWidth","width","viewportHeight","height","canvasWidth","canvasHeight","mobile","margin","contentMaxWidth","offsetFactor","BackfaceMaterial","vertexShader","fragmentShader","side","BackSide","ShaderMaterial","RefractionMaterial","options","uniforms","envMap","backfaceMap","resolution","dummy","Object3D","Diamonds","gltf","useLoader","GLTFLoader","useMemo","scene","geometry","center","gl","camera","clock","model","ratio","getPixelRatio","envFbo","WebGLRenderTarget","backfaceFbo","texture","backfaceMaterial","refractionMaterial","forEach","data","i","t","getElapsedTime","set","copy","rotation","scale","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","autoClear","layers","setRenderTarget","clearColor","render","clearDepth","material","args","length","attach","__$","CustomMaterial","hasTexture","shift","opacity","color","Color","this","extend","Plane","map","last","Content","left","alignRight","Stripe","Math","PI","Pages","TextureLoader","minFilter","LinearFilter","img1","img2","img3","pixelWidth","style","textAlign","Startup","transparent","App","scrollArea","onScroll","e","target","scrollTop","useEffect","orthographic","fallback","className","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5faaca17.chunk.js","sourcesContent":["import { createRef } from \"react\"\nimport { Vector3 } from \"three\"\n\nconst state = {\n  sections: 3,\n  pages: 3,\n  zoom: 75,\n  images: [\"/photo-1548191265-cc70d3d45ba1.jpeg\", \"/photo-1519608487953-e999c86e7455.jpeg\", \"/photo-1533577116850-9cc66cad8a9b.jpeg\"],\n  diamonds: [\n    { x: 0, offset: 0.1, pos: new Vector3(), factor: 1.25 },\n    { x: 0, offset: 1.1, pos: new Vector3(), factor: 1.5 },\n    { x: 0, offset: 2.1, pos: new Vector3(), factor: 0.75 }\n  ],\n  top: createRef()\n}\n\nexport default state\n","import React, { createContext, useRef, useContext } from \"react\"\nimport { useFrame, useThree } from \"react-three-fiber\"\nimport lerp from \"lerp\"\nimport state from \"./store\"\n\nconst offsetContext = createContext(0)\n\nfunction Block({ children, offset, factor, ...props }) {\n  const { offset: parentOffset, sectionHeight } = useBlock()\n  const ref = useRef()\n  offset = offset !== undefined ? offset : parentOffset\n  useFrame(() => {\n    const curY = ref.current.position.y\n    const curTop = state.top.current\n    ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1)\n  })\n  return (\n    <offsetContext.Provider value={offset}>\n      <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\n        <group ref={ref}>{children}</group>\n      </group>\n    </offsetContext.Provider>\n  )\n}\n\nfunction useBlock() {\n  const { sections, pages, zoom } = state\n  const { size, viewport } = useThree()\n  const offset = useContext(offsetContext)\n  const viewportWidth = viewport.width\n  const viewportHeight = viewport.height\n  const canvasWidth = viewportWidth / zoom\n  const canvasHeight = viewportHeight / zoom\n  const mobile = size.width < 700\n  const margin = canvasWidth * (mobile ? 0.2 : 0.1)\n  const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6)\n  const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1))\n  const offsetFactor = (offset + 1.0) / sections\n  return {\n    viewport,\n    offset,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    mobile,\n    margin,\n    contentMaxWidth,\n    sectionHeight,\n    offsetFactor\n  }\n}\n\nexport { Block, useBlock }\n","import { ShaderMaterial, BackSide } from \"three\"\n\nexport default class BackfaceMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize(modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }`,\n      side: BackSide\n    })\n  }\n}\n","import { ShaderMaterial } from \"three\"\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        viewDirection = normalize((modelMatrix * vec4( position, 1.0)).xyz - cameraPosition);;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow(1.05 + dot(viewDirection, worldNormal), 100.0);\n      }\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution;\n        vec3 normal = worldNormal * (1.0 - 0.7) - texture2D(backfaceMap, uv).rgb * 0.7;\n        vec4 color = texture2D(envMap, uv += refract(viewDirection, normal, 1.0/1.5).xy);\n        //gl_FragColor = vec4(mix(color.rgb, vec3(0.15), fresnelFunc(viewDirection, normal)), 1.0);\n        gl_FragColor = vec4(mix(color.rgb, vec3(0.4), fresnelFunc(viewDirection, normal)), 1.0);\n      }`,\n      uniforms: {\n        envMap: { value: options.envMap },\n        backfaceMap: { value: options.backfaceMap },\n        resolution: { value: options.resolution }\n      }\n    })\n  }\n}\n","import { WebGLRenderTarget, Object3D } from \"three\"\nimport React, { useRef, useMemo } from \"react\"\nimport { useLoader, useThree, useFrame } from \"react-three-fiber\"\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\nimport lerp from \"lerp\"\nimport { useBlock } from \"./../blocks\"\nimport BackfaceMaterial from \"./BackfaceMaterial\"\nimport RefractionMaterial from \"./RefractionMaterial\"\nimport state from \"./../store\"\n\nconst dummy = new Object3D()\nexport default function Diamonds() {\n  const gltf = useLoader(GLTFLoader, \"/diamond.glb\")\n  useMemo(() => gltf.scene.children[0].geometry.center(), [])\n\n  const { size, gl, scene, camera, clock } = useThree()\n  const { contentMaxWidth, sectionHeight } = useBlock()\n  const model = useRef()\n  const ratio = gl.getPixelRatio()\n\n  const [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial] = useMemo(() => {\n    const envFbo = new WebGLRenderTarget(size.width * ratio, size.height * ratio)\n    const backfaceFbo = new WebGLRenderTarget(size.width * ratio, size.height * ratio)\n    const backfaceMaterial = new BackfaceMaterial()\n    const refractionMaterial = new RefractionMaterial({\n      envMap: envFbo.texture,\n      backfaceMap: backfaceFbo.texture,\n      resolution: [size.width * ratio, size.height * ratio]\n    })\n    return [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial]\n  }, [size, ratio])\n\n  useFrame(() => {\n    state.diamonds.forEach((data, i) => {\n      const t = clock.getElapsedTime() / 2\n      const { x, offset, factor } = data\n      data.pos.set(x, lerp(data.pos.y, -sectionHeight * offset * factor + (state.top.current / state.zoom) * factor, 0.1), 0)\n      dummy.position.copy(data.pos)\n      dummy.rotation.set(t, t, t)\n      dummy.scale.set(contentMaxWidth / 30, contentMaxWidth / 30, contentMaxWidth / 30)\n      dummy.updateMatrix()\n      model.current.setMatrixAt(i, dummy.matrix)\n      model.current.instanceMatrix.needsUpdate = true\n    })\n\n    gl.autoClear = false\n    camera.layers.set(0)\n    gl.setRenderTarget(envFbo)\n    gl.clearColor()\n    gl.render(scene, camera)\n    gl.clearDepth()\n    camera.layers.set(1)\n    model.current.material = backfaceMaterial\n    gl.setRenderTarget(backfaceFbo)\n    gl.clearDepth()\n    gl.render(scene, camera)\n    camera.layers.set(0)\n    gl.setRenderTarget(null)\n    gl.render(scene, camera)\n    gl.clearDepth()\n    camera.layers.set(1)\n    model.current.material = refractionMaterial\n    gl.render(scene, camera)\n  }, 1)\n\n  return (\n    <instancedMesh ref={model} layers={1} args={[null, null, state.diamonds.length]} position={[0, 0, 50]}>\n      <bufferGeometry attach=\"geometry\" {...gltf.__$[1].geometry} />\n    </instancedMesh>\n  )\n}\n","import { ShaderMaterial, Color } from \"three\"\nimport { extend } from \"react-three-fiber\"\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `uniform float scale;\n      uniform float shift;\n      varying vec2 vUv;\n      void main() {\n        vec3 pos = position;\n        pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n      }`,\n      fragmentShader: `uniform sampler2D texture;\n      uniform float hasTexture;\n      uniform float shift;\n      uniform float scale;\n      uniform vec3 color;\n      uniform float opacity;\n      varying vec2 vUv;\n      void main() {\n        float angle = 1.55;\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n        vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n        vec4 cr = texture2D(texture, p + offset);\n        vec4 cga = texture2D(texture, p);\n        vec4 cb = texture2D(texture, p - offset);\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n        else gl_FragColor = vec4(color, opacity);\n      }`,\n      uniforms: {\n        texture: { value: null },\n        hasTexture: { value: 0 },\n        scale: { value: 0 },\n        shift: { value: 0 },\n        opacity: { value: 1 },\n        color: { value: new Color(\"white\") }\n      }\n    })\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value\n  }\n\n  get scale() {\n    return this.uniforms.scale.value\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value\n  }\n\n  get shift() {\n    return this.uniforms.shift.value\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value\n    this.uniforms.texture.value = value\n  }\n\n  get map() {\n    return this.uniforms.texture.value\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n}\n\nextend({ CustomMaterial })\n","import ReactDOM from \"react-dom\"\nimport lerp from \"lerp\"\nimport React, { Suspense, useRef, useEffect } from \"react\"\nimport { Canvas, Dom, useFrame, useLoader } from \"react-three-fiber\"\nimport { TextureLoader, LinearFilter } from \"three\"\nimport { Block, useBlock } from \"./blocks\"\nimport Diamonds from \"./diamonds/Diamonds\"\nimport state from \"./store\"\nimport \"./CustomMaterial\"\nimport \"./styles.css\"\n\nfunction Plane({ color = \"white\", map, ...props }) {\n  const { viewportHeight, offsetFactor } = useBlock()\n  const material = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    const { pages, top } = state\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1)\n    material.current.shift = lerp(material.current.shift, (top.current - last) / 150, 0.1)\n    last = top.current\n  })\n  return (\n    <mesh {...props}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n      <customMaterial ref={material} attach=\"material\" color={color} map={map} />\n    </mesh>\n  )\n}\n\nfunction Content({ left, children, map }) {\n  const { contentMaxWidth, canvasWidth, margin } = useBlock()\n  const aspect = 1.75\n  const alignRight = (canvasWidth - contentMaxWidth - margin) / 2\n  return (\n    <group position={[alignRight * (left ? -1 : 1), 0, 0]}>\n      <Plane scale={[contentMaxWidth, contentMaxWidth / aspect, 1]} color=\"#bfe2ca\" map={map} />\n      {children}\n    </group>\n  )\n}\n\nfunction Stripe() {\n  const { contentMaxWidth } = useBlock()\n  return <Plane scale={[100, contentMaxWidth, 1]} rotation={[0, 0, Math.PI / 4]} position={[0, 0, -1]} color=\"#171725\" />\n}\n\nfunction Pages() {\n  const textures = useLoader(TextureLoader, state.images)\n  const [img1, img2, img3] = textures.map(texture => ((texture.minFilter = LinearFilter), texture))\n  const { contentMaxWidth, mobile } = useBlock()\n  const aspect = 1.75\n  const pixelWidth = contentMaxWidth * state.zoom\n  return (\n    <>\n      {/* First section */}\n      <Block factor={1.5} offset={0}>\n        <Content left map={img1}>\n          <Dom style={{ width: pixelWidth / (mobile ? 1 : 2), textAlign: \"left\" }} position={[-contentMaxWidth / 2, -contentMaxWidth / 2 / aspect - 0.4, 1]}>\n            The substance can take you to heaven but it can also take you to hell.\n          </Dom>\n        </Content>\n      </Block>\n      {/* Second section */}\n      <Block factor={2.0} offset={1}>\n        <Content map={img2}>\n          <Dom style={{ width: pixelWidth / (mobile ? 1 : 2), textAlign: \"right\" }} position={[mobile ? -contentMaxWidth / 2 : 0, -contentMaxWidth / 2 / aspect - 0.4, 1]}>\n            We’ve found that the people whose EEG doesn’t show any alpha-wave activity when they’re relaxed aren’t likely to respond significantly to the substance.\n          </Dom>\n        </Content>\n      </Block>\n      {/* Stripe */}\n      <Block factor={-1.0} offset={1}>\n        <Stripe />\n      </Block>\n      {/* Last section */}\n      <Block factor={1.5} offset={2}>\n        <Content left map={img3}>\n          <Dom style={{ width: pixelWidth / (mobile ? 1 : 2), textAlign: \"left\" }} position={[-contentMaxWidth / 2, -contentMaxWidth / 2 / aspect - 0.4, 1]}>\n            Education and enlightenment.\n          </Dom>\n        </Content>\n      </Block>\n    </>\n  )\n}\n\nfunction Startup() {\n  const ref = useRef()\n  useFrame(() => (ref.current.material.opacity = lerp(ref.current.material.opacity, 0, 0.025)))\n  return (\n    <mesh ref={ref} position={[0, 0, 200]} scale={[100, 100, 1]}>\n      <planeBufferGeometry attach=\"geometry\" />\n      <meshBasicMaterial attach=\"material\" color=\"#070712\" transparent />\n    </mesh>\n  )\n}\n\nfunction App() {\n  const scrollArea = useRef()\n  const onScroll = e => (state.top.current = e.target.scrollTop)\n  useEffect(() => void onScroll({ target: scrollArea.current }), [])\n  return (\n    <>\n      <Canvas orthographic camera={{ zoom: state.zoom, position: [0, 0, 500] }}>\n        <Suspense fallback={<Dom center className=\"loading\" children=\"Loading...\" />}>\n          <Pages />\n          <Diamonds />\n          <Startup />\n        </Suspense>\n      </Canvas>\n      <div className=\"scrollArea\" ref={scrollArea} onScroll={onScroll}>\n        <div style={{ height: `${state.pages * 100}vh` }} />\n      </div>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}